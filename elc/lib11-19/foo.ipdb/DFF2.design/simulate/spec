DESIGN(DFF2) + REFERENCE(AMI06N,AMI06P);
PORT(CLK) + DIRECTION(INPUT) + CLOCK(R) + NET_NUMBER(0);
PORT(CLRB) + DIRECTION(INPUT) + FORCE(L) + NET_NUMBER(1);
PORT(D) + DIRECTION(INPUT) + DATA + NET_NUMBER(2);
PORT(Q) + DIRECTION(OUTPUT) + LOGIC(~QB) + EFFECTED(QB) + NET_NUMBER(3);
PORT(QB) + DIRECTION(OUTPUT) + LOGIC(~(CLRB&P0000)) + FALL(-NAN,-NAN) + NAKED + NET_NUMBER(4);
PORT(VDD) + DIRECTION(INPUT) + SUPPLY1 + BULK + NET_NUMBER(5);
PORT(GND) + DIRECTION(INPUT) + SUPPLY0 + BULK + NET_NUMBER(6);
NODE(P0000) + DIRECTION(OUTPUT) + SOURCE(VDD) + NET_NUMBER(7) + NAME_MAP(12);
NODE(P0001) + DIRECTION(OUTPUT) + SOURCE(VDD) + NET_NUMBER(10) + NAME_MAP(11);
NODE(P0002) + DIRECTION(OUTPUT) + SOURCE(VDD) + NET_NUMBER(12) + NAME_MAP(10);
REGISTER(QB,P0000) + LOGIC(~(CLRB&P0000),~(CLK?~P0001:QB));
REGISTER(P0002,P0001) + LOGIC(~(CLRB&P0001),(CLK?~P0002:D));
ARC(CLK:Q) + NON_UNATE + RISE_EDGE
 + TRAN(01:01)
 + TRAN(01:10)
 + USE(D0000,D0002);
ARC(CLK:QB) + NON_UNATE + RISE_EDGE + ONE_STAGE
 + TRAN(01:01)
 + TRAN(01:10)
 + USE(D0001,D0003);
ARC(CLRB:Q) + POSITIVE_UNATE + CLEAR + ONE_STAGE
 + TRAN(10:10)
 + USE(D0009,D0011,D0013);
ARC(CLRB:QB) + NEGATIVE_UNATE + PRESET + ONE_STAGE
 + TRAN(10:01)
 + USE(D0010,D0012,D0014);
CHECK(D) + RELATED(CLK:01) + SETUP + HOLD + WHEN(CLRB)
 + USE(R0000,R0001,R0002,R0003);
CHECK(CLRB:01) + RELATED(CLK:01) + RELEASE + REMOVABLE + WHEN(D)
 + USE(R0004,R0005);
CHECK(CLK) + WIDTH_H + WIDTH_L
 + USE(D0000,D0001,D0002,D0003,D0005,D0006);
CHECK(CLRB) + WIDTH_L
 + USE(D0009,D0010,D0011,D0012,D0013,D0014);
VECTOR(R10D-10DLH) + ID(D0000) + MID(MD0000) + DELAY(CLK) + TARGET(Q);
VECTOR(R10-U10DLH) + ID(D0001) + MID(MD0001) + DELAY(CLK) + TARGET(QB);
VECTOR(R11U-10UHL) + ID(D0002) + MID(MD0000) + DELAY(CLK) + TARGET(Q);
VECTOR(R11-D10UHL) + ID(D0003) + MID(MD0001) + DELAY(CLK) + TARGET(QB);
VECTOR(R10LH10LLH) + ID(D0004) + MID(MP0004) + POWER(CLK);
VECTOR(F10HL10HDU) + ID(D0005) + MID(MP0004) + POWER(CLK);
VECTOR(F11LH10LUD) + ID(D0006) + MID(MP0004) + POWER(CLK);
VECTOR(F10LH10LLH) + ID(D0007) + MID(MP0004) + POWER(CLK);
VECTOR(0R0LH10LLH) + ID(D0008) + MID(MP0008) + POWER(CLRB);
VECTOR(0F0D-10DLH) + ID(D0009) + MID(MD0009) + DELAY(CLRB) + TARGET(Q);
VECTOR(0F0-U10DLH) + ID(D0010) + MID(MD0010) + DELAY(CLRB) + TARGET(QB);
VECTOR(0F1D-10DHU) + ID(D0011) + MID(MD0009) + DELAY(CLRB) + TARGET(Q);
VECTOR(0F1-U10DHU) + ID(D0012) + MID(MD0010) + DELAY(CLRB) + TARGET(QB);
VECTOR(1F0D-10DDU) + ID(D0013) + MID(MD0009) + DELAY(CLRB) + TARGET(Q);
VECTOR(1F0-U10DDU) + ID(D0014) + MID(MD0010) + DELAY(CLRB) + TARGET(QB);
VECTOR(0F0LH10LLH) + ID(D0015) + MID(MP0008) + POWER(CLRB);
VECTOR(01RHL10HUD) + ID(D0016) + MID(MP0016) + POWER(D);
VECTOR(11RHL10HHL) + ID(D0017) + MID(MP0016) + POWER(D);
VECTOR(01FHL10HDU) + ID(D0018) + MID(MP0016) + POWER(D);
VECTOR(11FHL10HHL) + ID(D0019) + MID(MP0016) + POWER(D);
VECTOR(001LH10LHH) + ID(D0020) + MID(ML0000) + POWER();
VECTOR(100LH10LLH) + ID(D0021) + MID(ML0000) + POWER();
VECTOR(101LH10LLH) + ID(D0022) + MID(ML0000) + POWER();
VECTOR(R1Jud10uud) + ID(R0000) + MID(R0000) + RACE(D,CLK) + SETUP + TARGET(Q,QB);
VECTOR(R1Jdu10dlh) + ID(R0001) + MID(R0001) + RACE(CLK,D) + HOLD + TARGET(Q,QB);
VECTOR(R1Kud10uhl) + ID(R0002) + MID(R0002) + RACE(CLK,D) + HOLD + TARGET(Q,QB);
VECTOR(R1Kdu10ddu) + ID(R0003) + MID(R0003) + RACE(D,CLK) + SETUP + TARGET(Q,QB);
VECTOR(RJ1lh10ldh) + ID(R0004) + MID(R0004) + RACE(CLK,CLRB) + REMOVABLE + TARGET(Q,QB);
VECTOR(RJ1ud10uhd) + ID(R0005) + MID(R0005) + RACE(CLRB,CLK) + RELEASE + TARGET(Q,QB);
END_OF_DESIGN;

